@model Doit.Models.Meditation

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h4>Share Thoughts/Experience</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create" method="post" enctype="multipart/form-data">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Date" class="control-label"></label>
                <input asp-for="Date" class="form-control" />
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Title" class="control-label">Title</label>
                <input asp-for="Title" class="form-control" placeholder="ex: Hilarious" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label">Meditation</label>
                <textarea asp-for="Description" class="form-control" placeholder="What's On Your Mind?" rows="4"></textarea>
            </div>
            <button class="btn btn-primary" id="start-recording" onclick="startRecording()">Recording Start</button>
            <button class="btn btn-default" id="stop-recording" onclick="stopRecording()">Stop</button>
            <button class="btn btn-default" id="save-recording" onclick="saveRecording()">Save</button>
            <div id="record-audio"></div>
            <span id="clicks">0</span>

            <div id="container">

                <video id="gum" playsinline autoplay muted></video>
                <video id="recorded" playsinline loop></video>

                <div>
                    <button type="button" id="start">Start camera</button>
                    <button type="button" id="record" disabled>Start Recording</button>
                    <button type="button" id="play" disabled>Play</button>
                    <button type="button" id="download" disabled>Download</button>
                </div>

                <div>
                    Recording format: <select id="codecPreferences" disabled></select>
                </div>
               
                <div>
                    <span id="errorMsg"></span>
                </div>

            </div>

            <div class="form-group">
                <label asp-for="VideoUrl" class="control-label"></label>
                <input type="file" asp-for="VideoFile" class="form-control" />
                <span asp-validation-for="VideoFile" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="AudioUrl" class="control-label"></label>
                <input type="file" asp-for="AudioFile" class="form-control" />
                <span asp-validation-for="AudioFile" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}



    <script>

  function captureUserMedia(mediaConstraints, successCallback, errorCallback) {
    navigator.mediaDevices.getUserMedia(mediaConstraints).then(successCallback).catch(errorCallback);
  }

  var mediaConstraints = {
    audio: true
  };
  document.querySelector('#save-recording').onclick = function () {
      this.disabled = true;
      mediaRecorder.save();
      // alert('Drop WebM file on Chrome or Firefox. Both can play entire file. VLC player or other players may not work.');
  };
  function startRecording(idx) {
    $('#start-recording').disabled = true;
    audiosContainer = document.getElementById('audios-container');
    document.getElementById("clicks").innerHTML = "Recording Started";

    var f = document.getElementById('clicks');
    setInterval(function () {
        f.style.display = (f.style.display == 'none' ? '' : 'none');
    }, 1000);

    captureUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
  };

  function stopRecording() {
      $('#stop-recording').disabled = true;

      document.getElementById("clicks").innerHTML = "Recording Stopped";

      var f = document.getElementById('clicks');
      setInterval(function () {
          f.style.display = (f.style.display == 'none' ? '' : 'none');
      }, 1000);
    mediaRecorder.stop();
    mediaRecorder.stream.stop();


    $('.start-recording').disabled = false;
  };

  function saveRecording() {
      mediaRecorder.save();
  };

  var mediaRecorder;

  function onMediaSuccess(stream) {
    mediaRecorder = new MediaStreamRecorder(stream);
    mediaRecorder.stream = stream;
    mediaRecorder.mimeType = 'audio/wav';
    mediaRecorder.audioChannels = 1;
    mediaRecorder.ondataavailable = function(blob) {
      $('#record-audio').html("<audio controls=''><source src=" + URL.createObjectURL(blob) + "></source></audio>");
    };

    var timeInterval = 360 * 1000;

    mediaRecorder.start(timeInterval);

    $('#stop-recording').disabled = false;
  }

  function onMediaError(e) {
    console.error('media error', e);
  }

  function bytesToSize(bytes) {
    var k = 1000;
    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    if (bytes === 0) return '0 Bytes';
    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);
    return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
  }

  function getTimeLength(milliseconds) {
    var data = new Date(milliseconds);
    return data.getUTCHours() + " hours, " + data.getUTCMinutes() + " minutes and " + data.getUTCSeconds() + " second(s)";
  }

  window.onbeforeunload = function() {
    $('#start-recording').disabled = false;
  };

    </script>

}
